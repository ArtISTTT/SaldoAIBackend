import { TransactionModel } from '@/models/transaction/transaction.model';
import { InsightModel } from '@/models/insight/insight.model';
import { getOpenAI } from './openai';

export type Insight = {
  message: string;
  severity: 'info' | 'warning' | 'critical';
};

const CACHE_TTL_HOURS = 24;

export const generateInsights = async (userId: string): Promise<Insight[]> => {
  const openai = getOpenAI();
  const now = new Date();
  const threshold = new Date(now.getTime() - CACHE_TTL_HOURS * 60 * 60 * 1000);

  // 1. –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Å–≤–µ–∂–∏–µ –∏–Ω—Å–∞–π—Ç—ã
  const existing = await InsightModel.findOne({
    userId,
    period: '30d',
    generatedAt: { $gte: threshold },
  });

  if (existing) {
    return existing.insights;
  }

  // 2. –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
  const date30DaysAgo = new Date();
  date30DaysAgo.setDate(date30DaysAgo.getDate() - 30);

  const transactions = await TransactionModel.find({
    userId,
    date: { $gte: date30DaysAgo },
  });

  const compacted = transactions.map((tx) => ({
    date: tx.date.toISOString().split('T')[0],
    amount: tx.amount,
    type: tx.type,
    category: tx.category,
  }));

  // 3. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ prompt –¥–ª—è AI
  const prompt = `
–¢—ã ‚Äî —É–º–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π –º–∞–ª–æ–º—É –±–∏–∑–Ω–µ—Å—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ.

–ù–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ—Ç 4 –¥–æ 6 –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Å–∞–π—Ç–æ–≤. –ö–∞–∂–¥—ã–π –∏–Ω—Å–∞–π—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:
- –ö—Ä–∞—Ç–∫–∏–º (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è),
- –ü–æ–ª–µ–∑–Ω—ã–º (—Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å),
- –ù–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —ç–º–æ–¥–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "üí∞", "üìà", "üìâ", "‚ö†Ô∏è", "üí°"),
- –ò–º–µ—Ç—å —É—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏: "info" (–∑–∞–º–µ—Ç–∫–∞), "warning" (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ), –∏–ª–∏ "critical" (—Å—Ä–æ—á–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞).

–í–∞–∂–Ω–æ: –≤—Å–µ —Å—É–º–º—ã —É–∫–∞–∑–∞–Ω—ã –≤ —Ä—É–±–ª—è—Ö (‚ÇΩ).

–û—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON-–º–∞—Å—Å–∏–≤–∞, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:

[
  { "message": "<–∏–Ω—Å–∞–π—Ç>", "severity": "info" | "warning" | "critical" }
]

–í–æ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö:
${JSON.stringify(compacted)}
`;

  try {
    const res = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        { role: 'system', content: '–¢—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫.' },
        { role: 'user', content: prompt },
      ],
      temperature: 0.5,
      max_tokens: 600,
    });

    const jsonRaw = res.choices[0]?.message?.content;
    const clean = (jsonRaw || '')
      .replace(/^```json/, '')
      .replace(/^```/, '')
      .replace(/```$/, '')
      .trim();

    const parsed = JSON.parse(clean || '[]');

    const validInsights = Array.isArray(parsed)
      ? parsed.filter(
          (i) =>
            typeof i.message === 'string' &&
            ['info', 'warning', 'critical'].includes(i.severity)
        )
      : [];

    // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Å–∞–π—Ç—ã
    await InsightModel.findOneAndUpdate(
      { userId, period: '30d' },
      { insights: validInsights, generatedAt: new Date() },
      { upsert: true }
    );

    return validInsights;
  } catch (error) {
    console.error('AI insight generation error:', error);
    return [];
  }
};