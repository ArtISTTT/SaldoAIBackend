
import { Types } from 'mongoose';
import { BusinessMetricsService } from './businessMetrics';
import { CashFlowService } from './cashFlowService';
import { FinancialMetricsService } from './financialMetrics';
import { ProfitabilityService } from './profitabilityService';
import { TaxService } from './taxService';
import { BusinessProfileModel } from '@/models/businessProfile/businessProfile.model';
import { BusinessType } from '@/constants';

export class BusinessHealthService {
  static async generateHealthDashboard(userId: Types.ObjectId) {
    const businessProfile = await BusinessProfileModel.findOne({ userId });
    const [
      categoryGrowth,
      roi,
      paymentIntervals,
      cashFlow,
      recurringExpenses,
      profitability,
      taxes
    ] = await Promise.all([
      BusinessMetricsService.analyzeCategoryGrowth(userId),
      BusinessMetricsService.calculateROI(userId),
      BusinessMetricsService.analyzePaymentIntervals(userId),
      CashFlowService.projectCashFlow(userId, 3),
      FinancialMetricsService.findRecurringExpenses(userId),
      ProfitabilityService.calculateNetProfit(userId),
      TaxService.calculateTaxes(userId)
    ]);

    const healthScore = this.calculateHealthScore({
      roi: roi.roi,
      hasCashGap: cashFlow.hasCashGap,
      profitMargin: (profitability.netProfit / profitability.income) * 100,
      paymentTrend: paymentIntervals.trend === 'stable' ? 1 : 0
    });

    const alerts = this.generateAlerts({
      categoryGrowth,
      cashFlow,
      profitability,
      taxes
    });

    return {
      overview: {
        healthScore,
        status: this.getHealthStatus(healthScore),
        summary: this.generateSummary(healthScore, alerts)
      },
      metrics: {
        profitMargin: ((profitability.netProfit / profitability.income) * 100).toFixed(1),
        cashFlowStatus: cashFlow.summary,
        roiStatus: roi.message,
        recurringExpensesTotal: recurringExpenses.reduce((sum, exp) => sum + exp.yearAheadCost, 0)
      },
      projections: {
        cashFlow: cashFlow.monthlyProjections,
        nextTaxDue: taxes.nextPaymentDate,
        estimatedTaxAmount: taxes.taxAmount
      },
      alerts: alerts,
      recommendations: this.generateRecommendations({
        healthScore,
        cashFlow,
        profitability,
        recurringExpenses
      })
    };
  }

  private static calculateHealthScore(metrics: {
    roi: number;
    hasCashGap: boolean;
    profitMargin: number;
    paymentTrend: number;
  }): number {
    const weights = {
      roi: 0.3,
      cashFlow: 0.3,
      profitMargin: 0.3,
      paymentTrend: 0.1
    };

    const scores = {
      roi: Math.min(metrics.roi * 50, 100),
      cashFlow: metrics.hasCashGap ? 30 : 100,
      profitMargin: Math.min(metrics.profitMargin * 2, 100),
      paymentTrend: metrics.paymentTrend * 100
    };

    return Object.entries(weights).reduce(
      (score, [key, weight]) => score + scores[key as keyof typeof scores] * weight,
      0
    );
  }

  private static getHealthStatus(score: number): string {
    if (score >= 80) return '–û—Ç–ª–∏—á–Ω–æ';
    if (score >= 60) return '–•–æ—Ä–æ—à–æ';
    if (score >= 40) return '–ü–ª–æ—Ö–æ';
    return '–ö—Ä–∏—Ç–∏—á–Ω–æ';
  }

  private static generateSummary(score: number, alerts: any[]): string {
    const status = this.getHealthStatus(score);
    const alertCount = alerts.length;

    if (status === '–û—Ç–ª–∏—á–Ω–æ') {
      return `üåü –ë–∏–∑–Ω–µ—Å –ø—Ä–æ—Ü–≤–µ—Ç–∞–µ—Ç, –∏–Ω–¥–µ–∫—Å –∑–¥–æ—Ä–æ–≤—å—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${score.toFixed(1)}`;
    }
    if (status === '–•–æ—Ä–æ—à–æ') {
      return `‚úÖ –£ –±–∏–∑–Ω–µ—Å–∞ —Ö–æ—Ä–æ—à–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–æ –µ—Å—Ç—å ${alertCount} –æ–±–ª–∞—Å—Ç—å(-–µ–π) –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏`;
    }
    if (status === '–ü–ª–æ—Ö–æ') {
      return `‚ö†Ô∏è –ë–∏–∑–Ω–µ—Å —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è –≤ ${alertCount} –æ–±–ª–∞—Å—Ç—è—Ö`;
    }
    return `üö® –ù–µ–æ–±—Ö–æ–¥–∏–º—ã —Å—Ä–æ—á–Ω—ã–µ –º–µ—Ä—ã ‚Äî –≤—ã—è–≤–ª–µ–Ω–æ ${alertCount} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º`;
  }

  private static generateAlerts(data: any): any[] {
    const alerts = [];

    // Add category growth alerts
    if (data.categoryGrowth) {
      alerts.push(...data.categoryGrowth.map((alert: any) => ({
        message: `üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–∑–º–æ–∂–Ω—ã–π –∫–∞—Å—Å–æ–≤—ã–π —Ä–∞–∑—Ä—ã–≤ –≤ ${data.cashFlow.cashGapMonth}`,
        severity: 'critical'
      })));
    }

    // Add cash flow alerts
    if (data.cashFlow.hasCashGap) {
      alerts.push({
        message: 'üö® –ë–∏–∑–Ω–µ—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —É–±—ã—Ç–æ–∫',
        severity: 'critical'
      });
    }

    // Add profitability alerts
    if (data.profitability.netProfit < 0) {
      alerts.push({
        message: 'üö® Business is operating at a loss',
        severity: 'critical'
      });
    }

    // Add tax alerts
    if (new Date(data.taxes.nextPaymentDate).getTime() - Date.now() < 15 * 24 * 60 * 60 * 1000) {
      alerts.push({
        severity: 'warning',
        message: `‚ö†Ô∏è –°–∫–æ—Ä–æ —Å—Ä–æ–∫ —É–ø–ª–∞—Ç—ã –Ω–∞–ª–æ–≥–∞ ‚Äî ${data.taxes.taxAmount.toFixed(2)} —Ä—É–±.`
      });
    }

    // Add tax system specific alerts
    if (data.taxes.recommendations) {
      data.taxes.recommendations.forEach((rec: string) => {
        alerts.push({
          severity: rec.includes('üö®') ? 'critical' : 'warning',
          message: rec
        });
      });
    }

    return alerts;
  }

  private static generateRecommendations(data: any): string[] {
    const recommendations = [];

    if (data.healthScore < 60) {
      recommendations.push('üìä –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π');
    }

    if (data.cashFlow.hasCashGap) {
      recommendations.push('üí∞ –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ñ–æ–Ω–¥ –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã—Ö –∫–∞—Å—Å–æ–≤—ã—Ö —Ä–∞–∑—Ä—ã–≤–æ–≤');
    }

    if (data.recurringExpenses.length > 0) {
      recommendations.push('üîç –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏');
    }

    if (data.profitability.netProfit > 0 && data.profitability.netProfit < data.profitability.income * 0.1) {
      recommendations.push('üìà –°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞ —Å—á—ë—Ç —Å–Ω–∏–∂–µ–Ω–∏—è –∑–∞—Ç—Ä–∞—Ç –∏–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ü–µ–Ω');
    }

    return recommendations;
  }
}
