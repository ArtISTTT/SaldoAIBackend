import { TransactionModel } from '@/models/transaction/transaction.model';
import { Types } from 'mongoose';

export class BusinessMetricsService {
  // –ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  static async analyzeCategoryGrowth(userId: Types.ObjectId) {
    const lastMonth = new Date();
    lastMonth.setMonth(lastMonth.getMonth() - 1);

    const twoMonthsAgo = new Date();
    twoMonthsAgo.setMonth(twoMonthsAgo.getMonth() - 2);

    const transactions = await TransactionModel.find({
      userId,
      date: { $gte: twoMonthsAgo }
    });

    const lastMonthByCategory = this.groupByCategory(
      transactions.filter(t => t.date >= lastMonth)
    );
    
    const previousMonthByCategory = this.groupByCategory(
      transactions.filter(t => t.date < lastMonth && t.date >= twoMonthsAgo)
    );

    const alerts = [];
    for (const [category, amount] of lastMonthByCategory) {
      const prevAmount = previousMonthByCategory.get(category) || 0;
      const growth = prevAmount ? (amount - prevAmount) / prevAmount : 1;
      
      if (growth >= 0.8) { // –†–æ—Å—Ç –Ω–∞ 80% –∏ –±–æ–ª–µ–µ
        alerts.push({
          category,
          growth: growth * 100,
          message: `‚ö†Ô∏è –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category}" –≤—ã—Ä–æ—Å–ª–∏ –Ω–∞ ${Math.round(growth * 100)}%`
        });
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –æ–±—â–∏—Ö —Ä–∞—Å—Ö–æ–¥–∞—Ö
    const totalExpense = Array.from(lastMonthByCategory.values())
      .reduce((sum, amount) => sum + amount, 0);

    for (const [category, amount] of lastMonthByCategory) {
      const share = amount / totalExpense;
      if (share > 0.45) { // –ü–æ—Ä–æ–≥ 45%
        alerts.push({
          category,
          share: share * 100,
          message: `üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${category}" —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${Math.round(share * 100)}% –æ—Ç –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤`
        });
      }
    }

    return alerts;
  }

  // –†–∞—Å—á—ë—Ç ROI (–æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –≤ —Ä–µ–∫–ª–∞–º—É)
  static async calculateROI(userId: Types.ObjectId) {
    const lastMonth = new Date();
    lastMonth.setMonth(lastMonth.getMonth() - 1);

    const transactions = await TransactionModel.find({
      userId,
      date: { $gte: lastMonth }
    });

    const advertising = transactions
      .filter(t => t.category === 'ADVERTISING_EXPENSES')
      .reduce((sum, t) => sum + t.amount, 0);

    const revenue = transactions
      .filter(t => t.type === 'income')
      .reduce((sum, t) => sum + t.amount, 0);

    const roi = advertising ? revenue / advertising : 0;

    return {
      roi,
      isEfficient: roi > 2,
      isProfitable: roi > 1,
      message: this.getRoiMessage(roi)
    };
  }

  // –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –º–µ–∂–¥—É –æ–ø–ª–∞—Ç–∞–º–∏
  static async analyzePaymentIntervals(userId: Types.ObjectId) {
    const transactions = await TransactionModel.find({
      userId,
      type: 'income',
    }).sort({ date: 1 });

    if (transactions.length < 2) {
      return { average: 0, trend: 'insufficient_data' };
    }

    const intervals = [];
    for (let i = 1; i < transactions.length; i++) {
      const days = Math.floor(
        (transactions[i].date.getTime() - transactions[i-1].date.getTime()) 
        / (1000 * 60 * 60 * 24)
      );
      intervals.push(days);
    }

    const average = intervals.reduce((sum, i) => sum + i, 0) / intervals.length;
    const recentAvg = intervals.slice(-3).reduce((sum, i) => sum + i, 0) / 3;

    return {
      average,
      trend: recentAvg > average * 1.2 ? 'increasing' : 'stable',
      message: this.getIntervalMessage(average, recentAvg)
    };
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  private static groupByCategory(transactions: any[]): Map<string, number> {
    const map = new Map<string, number>();
    for (const tx of transactions) {
      const current = map.get(tx.category) || 0;
      map.set(tx.category, current + tx.amount);
    }
    return map;
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ ROI
  private static getRoiMessage(roi: number): string {
    if (roi > 2) return "üî• –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—á–µ–Ω—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ";
    if (roi > 1) return "‚úÖ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –ø—Ä–∏–Ω–æ—Å–∏—Ç –ø—Ä–∏–±—ã–ª—å";
    return "‚ö†Ô∏è ROI –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —É–ª—É—á—à–µ–Ω–∏–∏";
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º –æ–ø–ª–∞—Ç
  private static getIntervalMessage(avg: number, recent: number): string {
    if (recent > avg * 1.2) {
      return "‚ö†Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –ø–ª–∞—Ç–µ–∂–∞–º–∏ —Ä–∞—Å—Ç—É—Ç ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ —Å–Ω–∏–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤";
    }
    return `‚úÖ –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–ª–∞—Ç–µ–∂–∞–º–∏: ${Math.round(avg)} –¥–Ω–µ–π`;
  }
}